FROM node:18-alpine

# Install system dependencies
RUN apk add --no-cache \
    curl \
    bash \
    git \
    python3 \
    make \
    g++ \
    sqlite \
    && rm -rf /var/cache/apk/*

# Set working directory
WORKDIR /app

# Create neural-ai user
RUN addgroup -g 1001 neural-ai && \
    adduser -D -s /bin/bash -u 1001 -G neural-ai neural-ai

# Copy package files first for better caching
COPY package*.json ./
COPY tsconfig.json ./

# Install ALL dependencies (including dev dependencies for building)
RUN npm ci && npm cache clean --force

# Copy ALL source code and configuration files
COPY src/ ./src/
COPY *.md ./
COPY *.json ./
COPY *.js ./
COPY *.cjs ./

# Build TypeScript
RUN npm run build

# Remove dev dependencies after build
RUN npm prune --production

# Create data and logs directories with proper permissions
RUN mkdir -p /app/data /app/logs && \
    chown -R neural-ai:neural-ai /app

# Expose ports
EXPOSE 6174 3003

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:6174/health || exit 1

# Set environment variables
ENV NODE_ENV=production
ENV NEURAL_MCP_PORT=6174
ENV MESSAGE_HUB_PORT=3003

# Switch to neural-ai user
USER neural-ai

# Start the unified neural MCP server
CMD ["node", "dist/unified-neural-mcp-server.js"]