services:
  # Universal MCP Gateway - The One Gateway to Rule Them All
  universal-gateway:
    build:
      context: ..
      dockerfile: docker/Dockerfile.universal-gateway
    container_name: universal-mcp-gateway
    ports:
      - "5200:5200"
    environment:
      - NODE_ENV=production
      - GATEWAY_PORT=5200
      - NEURAL_AI_URL=http://neural-ai:5174
      - REDIS_URL=redis://redis:6379
      - NEO4J_URL=bolt://neo4j:7687
      - WEAVIATE_URL=http://weaviate:8080
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/unified_platform
    depends_on:
      - postgres
      - redis
      - neo4j
      - weaviate
    networks:
      - neural-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5200/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  # Vector Database - Weaviate
  weaviate:
    image: semitechnologies/weaviate:1.22.4
    ports:
      - "8080:8080"
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: 'text2vec-openai,text2vec-cohere,text2vec-huggingface,ref2vec-centroid,generative-openai,qna-openai'
      CLUSTER_HOSTNAME: 'node1'
    volumes:
      - weaviate_data:/var/lib/weaviate
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 8080 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Graph Database - Neo4j
  neo4j:
    image: neo4j:5.15-community
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      NEO4J_AUTH: neo4j/password
      NEO4J_PLUGINS: '["apoc"]'
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Cache - Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # PostgreSQL Database (External - uses existing container)
  postgres:
    image: postgres:15-alpine
    container_name: neural-ai-postgres-simple
    environment:
      - POSTGRES_DB=neural_ai
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - neural-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d neural_ai"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Neural AI Platform Server
  neural-ai-platform:
    build:
      context: ..
      dockerfile: docker/Dockerfile.neural-ai
    ports:
      - "3000:3000"
      - "3001:3001"
      - "5174:5174"
    environment:
      - NODE_ENV=production
      - WEAVIATE_URL=http://weaviate:8080
      - NEO4J_URL=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - REDIS_URL=redis://redis:6379
    volumes:
      - unified_data:/app/data
    depends_on:
      weaviate:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Vue UI Dashboard
  vue-dashboard:
    build:
      context: ../ui/vue-ui
      dockerfile: Dockerfile
    ports:
      - "5176:5176"
    environment:
      - VITE_API_URL=http://neural-ai-platform:3000
      - VITE_WS_URL=ws://neural-ai-platform:3001
    depends_on:
      neural-ai-platform:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5176/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

networks:
  neural-network:
    driver: bridge

volumes:
  weaviate_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  redis_data:
  postgres_data:
  unified_data: